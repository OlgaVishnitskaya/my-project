# Временная директория и выходные пути
PDF_FILES_DIR = "/tmp/pdf_graphs"
os.makedirs(PDF_FILES_DIR, exist_ok=True)

# -------------------------------
# 1. save_gv_files — генерация .gv файлов (без изменений)
# -------------------------------
def save_gv_files(**kwargs):
    ti = kwargs['ti']

    # Пример данных — замените на реальные
    tables_data = [
        {
            'url_address': '/script1.sql',
            'final_table': 'tableA',
            'child_table': 'tableA',
            'parent_tables': ['tableB', 'tableC']
        },
        {
            'url_address': '/script1.sql',
            'final_table': 'tableA',
            'child_table': 'tableA',
            'parent_tables': ['tableD']
        },
        {
            'url_address': '/script2.sql',
            'final_table': 'tableX',
            'child_table': 'tableX',
            'parent_tables': ['tableY']
        }
    ]

    grouped_data = defaultdict(list)
    for data in tables_data:
        key = (data['url_address'], data['final_table'])
        grouped_data[key].append(data)

    tmpdir = tempfile.mkdtemp(prefix="graph_")
    output_dir = os.path.join(tmpdir, "graphs")
    os.makedirs(output_dir, exist_ok=True)

    gv_paths = []

    for (url_address, final_table), group in grouped_data.items():
        dot = Digraph(comment=f"Dependencies for {final_table}")
        dot.graph_attr['label'] = f"Build Script: {url_address}"
        dot.graph_attr['labelloc'] = 't'
        dot.graph_attr['fontsize'] = '16'

        for item in group:
            child = item['child_table']
            for parent in item['parent_tables']:
                dot.edge(parent, child, href=url_address, tooltip="View build script")

        gv_path = os.path.join(output_dir, f"dep_{final_table}.gv")
        dot.save(gv_path)
        gv_paths.append(gv_path)

    ti.xcom_push(key='tmpdir', value=tmpdir)
    ti.xcom_push(key='output_dir', value=output_dir)
    ti.xcom_push(key='gv_paths', value=gv_paths)
    ti.xcom_push(key='grouped_data_keys', value=list(grouped_data.keys()))  # для итерации

    print(f"✅ Сохранено {len(gv_paths)} .gv файлов")


# -------------------------------
# 2. generate_individual_pdfs — создаёт отдельный PDF для каждого графа
# -------------------------------
def generate_individual_pdfs(**kwargs):
    ti = kwargs['ti']
    output_dir = ti.xcom_pull(task_ids='save_gv_files', key='output_dir')
    keys = ti.xcom_pull(task_ids='save_gv_files', key='grouped_data_keys')

    pdf_paths = []

    for (url_address, final_table) in keys:
        # Собираем зависимости только для этого графа
        edges = set()
        nodes = set()

        # Здесь вы можете повторно использовать данные или читать .gv
        # Для примера — фильтруем вручную
        if final_table == 'tableA':
            parents = ['tableB', 'tableC', 'tableD']
            child = 'tableA'
            for p in parents:
                edges.add((p, child))
            nodes.update(parents + [child])
        elif final_table == 'tableX':
            edges.add(('tableY', 'tableX'))
            nodes.update(['tableY', 'tableX'])

        # Строим граф
        G = nx.DiGraph()
        G.add_edges_from(edges)
        G.add_nodes_from(nodes)

        # Визуализация
        plt.figure(figsize=(10, 7))
        pos = nx.spring_layout(G, k=0.8, iterations=50, seed=42)

        # Цвета
        node_colors = []
        color_map = {
            'tableA': '#ccffcc',
            'tableB': '#ccccff',
            'tableC': '#ffcccc',
            'tableD': '#ffffcc',
            'tableX': '#ccffff',
            'tableY': '#ffccff',
        }
        for node in G.nodes():
            node_colors.append(color_map.get(node, '#e0e0e0'))

        nx.draw(
            G, pos,
            with_labels=True,
            node_size=2500,
            node_color=node_colors,
            font_size=11,
            font_weight='bold',
            edge_color='gray',
            width=1.5,
            arrows=True,
            arrowsize=20,
            alpha=0.9
        )
        plt.title(f"Зависимости: {final_table}\nСкрипт: {url_address}", fontsize=14, pad=20)

        # Сохраняем PDF
        pdf_path = os.path.join(PDF_FILES_DIR, f"graph_{final_table}.pdf")
        plt.tight_layout()
        plt.savefig(pdf_path, format='pdf', bbox_inches='tight')
        plt.close()

        pdf_paths.append(pdf_path)

    # Пушим список всех PDF
    ti.xcom_push(key='pdf_paths', value=pdf_paths)
    print(f"✅ Сгенерировано {len(pdf_paths)} PDF: {pdf_paths}")


********************************************************************************************************************

import os
import logging
from collections import defaultdict
import matplotlib.pyplot as plt
import networkx as nx

def table_dependencies_test(**kwargs):
    logging.info(kwargs['data_interval_end'])
    # Подключение к MS SQL Server (пример, замените на ваш код)
    hook = get_mssql()
    df_for_update_test = hook.get_pandas_df("""
        select distinct final_table_nm, child_table_nm, parent_table_nm, url_address 
        from upd.airflow.v_table_graph_vov
        where t_changed_dttm >= cast(left('{}', 19) as datetime)
    """.format(kwargs['data_interval_end'] + timedelta(hours=3)))
    logging.info('df_for_update_test loaded')

    tables_data = [
        {
            'final_table_nm': row['final_table_nm'],
            'child_table_nm': row['child_table_nm'],
            'parent_table_nm': row['parent_table_nm'],
            'url_address': row['url_address']
        }
        for _, row in df_for_update_test.iterrows()
    ]
    kwargs['ti'].xcom_push(key="tables_data", value=tables_data)

def new(**kwargs):
    import os
    import logging

    ti = kwargs['ti']
    tables_data = ti.xcom_pull(task_ids='table_dependencies_test', key='tables_data')
    logging.info('tables_data pulled from XCom')

    # Группируем по url_address и final_table_nm
    grouped_data = defaultdict(list)
    for data in tables_data:
        key = (data['final_table_nm'], data['url_address'])
        grouped_data[key].append(data)

    output_dir = "/path/to/output"  # укажите ваш путь для сохранения PDF
    os.makedirs(output_dir, exist_ok=True)

    pdf_files = []

    for (final_table_nm, url_address), group in grouped_data.items():
        logging.info(f'Отрисовка графа для таблицы: {final_table_nm} по адресу: {url_address}')

        # Создаем ориентированный граф с NetworkX
        G = nx.DiGraph()

        # Добавляем узлы и ребра
        for data in group:
            child = data['child_table_nm']
            parents = data['parent_table_nm']
            if not isinstance(parents, list):
                parents = [parents]
            for parent in parents:
                G.add_edge(parent, child)

        # Визуализация с помощью matplotlib
        plt.figure(figsize=(12, 8))
        pos = nx.spring_layout(G)
        nx.draw(G, pos, with_labels=True, node_size=2000, node_color='lightblue', arrows=True)
        plt.title(f'Зависимости для: {final_table_nm}')

        # Сохраняем в PDF
        filename = f'dep_{final_table_nm}.pdf'
        pdf_path = os.path.join(output_dir, filename)
        plt.savefig(pdf_path)
        plt.close()
        logging.info(f'Граф сохранен: {pdf_path}')
        pdf_files.append(pdf_path)

    return pdf_files



*********************882222222222222222222222*************************************************************

def prepare_email_content(**kwargs):
    """Подготовка контента для EmailOperator"""
    ti = kwargs['ti']
    pdf_files_paths = ti.xcom_pull(task_ids='new_task_id', key='pdf_files_paths')
    
    # Проверяем существование файлов
    existing_files = []
    if pdf_files_paths:
        for file_path in pdf_files_paths:
            if os.path.exists(file_path):
                existing_files.append(file_path)
    
    # Сохраняем список файлов для использования в EmailOperator
    kwargs['ti'].xcom_push(key='email_files', value=existing_files)
    
    # Формируем текст письма
    if existing_files:
        html_content = f"""
        <p>Во вложении графы зависимостей таблиц ({len(existing_files)} файлов).</p>
        <p>Список файлов:</p>
        <ul>
        {''.join([f'<li>{os.path.basename(f)}</li>' for f in existing_files])}
        </ul>
        """
    else:
        html_content = "<p>Нет графов зависимостей для отправки.</p>"
    
    kwargs['ti'].xcom_push(key='email_html_content', value=html_content)

from airflow.operators.python import PythonOperator
from airflow.operators.email import EmailOperator

# В определении DAG:
table_deps_task = PythonOperator(
    task_id='table_dependencies_test',
    python_callable=table_dependencies_test
)

new_task = PythonOperator(
    task_id='new_task_id',
    python_callable=new
)

prepare_email_task = PythonOperator(
    task_id='prepare_email_content',
    python_callable=prepare_email_content
)

send_email_task = EmailOperator(
    task_id='send_email_task',
    to=['recipient@example.com'],  # Укажите реальных получателей
    subject='Графы зависимостей таблиц',
    html_content="{{ ti.xcom_pull(task_ids='prepare_email_content', key='email_html_content') }}",
    files="{{ ti.xcom_pull(task_ids='prepare_email_content', key='email_files') }}",
    dag=dag
)

# Установите зависимости
table_deps_task >> new_task >> prepare_email_task >> send_email_task



************333333333333333333333333333333***************************
import os
import logging
import matplotlib.pyplot as plt
import networkx as nx
from datetime import datetime
from airflow.utils.email import send_email

def create_sample_graph_test(**kwargs):
    """Создание графа с тестовыми данными"""
    import os
    import logging
    import matplotlib.pyplot as plt
    import networkx as nx
    
    # Создаем директорию для сохранения
    output_dir = "/tmp/airflow_graphs"
    os.makedirs(output_dir, exist_ok=True)
    
    # Создаем тестовый граф с несколькими узлами
    G = nx.DiGraph()
    G.add_edges_from([
        ('Таблица_A', 'Таблица_B'),
        ('Таблица_B', 'Таблица_C'),
        ('Таблица_A', 'Таблица_C')
    ])
    
    # Визуализация
    plt.figure(figsize=(12, 8))
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, node_size=2000, 
            node_color='lightblue', arrows=True, font_size=10)
    plt.title('Тестовый граф зависимостей')
    
    # Сохраняем в PDF
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f'test_sample_graph_{timestamp}.pdf'
    pdf_path = os.path.join(output_dir, filename)
    plt.savefig(pdf_path)
    plt.close()
    
    logging.info(f'Тестовый граф с данными сохранен: {pdf_path}')
    
    # Передаем путь в XCom
    kwargs['ti'].xcom_push(key='test_graph_path', value=pdf_path)
    return pdf_path

def send_test_email_with_graph(**kwargs):
    """Отправка тестового email с графом"""
    ti = kwargs['ti']
    
    # Получаем путь к файлу из XCom
    pdf_path = ti.xcom_pull(task_ids='create_test_graph_task', key='test_graph_path')
    
    logging.info(f'Получен путь к тестовому графу: {pdf_path}')
    
    # Проверяем существование файла
    files_to_send = []
    if pdf_path and os.path.exists(pdf_path):
        files_to_send.append(pdf_path)
        logging.info(f'Файл для отправки найден: {pdf_path}')
        file_info = f"Во вложении файл: {os.path.basename(pdf_path)}"
    else:
        logging.warning('Тестовый файл не найден, отправляем email без вложения')
        file_info = "Вложение не прикреплено (файл не найден)"
    
    # Формируем содержимое письма
    subject = 'Тестовый email с графом зависимостей'
    html_content = f"""
    <p>Это тестовое письмо с графом зависимостей.</p>
    <p>Используется для проверки функциональности отправки email с вложениями.</p>
    <p><strong>{file_info}</strong></p>
    """
    
    # Отправляем email
    try:
        send_email(
            to=['your-email@example.com'],  # Укажите реальный email
            subject=subject,
            html_content=html_content,
            files=files_to_send
        )
        logging.info('Тестовый email отправлен успешно')
    except Exception as e:
        logging.error(f'Ошибка при отправке тестового email: {str(e)}')
        raise


from airflow.operators.python import PythonOperator

# Тестовые задачи
create_test_graph_task = PythonOperator(
    task_id='create_test_graph_task',
    python_callable=create_sample_graph_test
)

send_test_email_task = PythonOperator(
    task_id='send_test_email_task',
    python_callable=send_test_email_with_graph
)

# Установите зависимости
create_test_graph_task >> send_test_email_task
